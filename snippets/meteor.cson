# JS FILE SNIPPETS
".js":
  # IMPORTS
  "Import Meteor":
    "prefix": "mimp"
    "body": """import { Meteor } from 'meteor/meteor';""",

  "Import Mongo":
    "prefix": "mimg"
    "body": """import { Mongo } from 'meteor/mongo';""",

  "Import Validated Method":
    "prefix": "mival"
    "body": """import { ValidatedMethod } from 'meteor/mdg:validated-method';""",

  "Import Check":
    "prefix": "mich"
    "body": """import { check } from 'meteor/check';""",

  # SNIPPETS FOR COLLECTIONS
  'Collection Allow':
    "prefix":"cola"
    "body":"""
      ${1:Collection}.allow({
        insert() { return false; },
        update() { return false; },
        remove() { return false; },
      });
    """,
  "Collection Deny":
    "prefix":"colde"
    "body": """
      ${1:Collection}.deny({
        insert() { return true; },
        update() { return true; },
        remove() { return true; },
      });
    """,
  "New Meteor Collection":
    "prefix":"mcol"
    "body":"""
      export const ${1:Collection} = new Mongo.Collection("${2:collection}")
    """,
  "Collection Find":
    "prefix": "mfind"
    "body": """
      ${1:Collection}.find({_id: ${2:id}});
    """,
  "Collection findOne":
    "prefix": "mfone"
    "body": """
      ${1:Collection}.findOne(${2:id});
    """,

  # SNIPPET FOR PUBLISH
  "Meteor Publish":
    "prefix": "mpub"
    "body": """
      Meteor.publish("${1:name}", function(${2:argument}){
        ${3}
      });
    """,

  # SNIPPET FOR SUBSCRIBE
  "Meteor Subscribe":
    "prefix": "msub"
    "body": """
      Meteor.subscribe("${1:name}", ${2:argument});
    """,

  # SNIPPETS FOR METHODS
  "Meteor Methods":
    "prefix": "mmeth"
    "body": """
      Meteor.methods({
        "${1:name}" (${2:argument}) {
          ${3}
        },
      });
    """,
  "Meteor Validated Method":
    "prefix": "mvmeth"
    "body": """
      export const ${1:variable} = new ValidatedMethod({
        name: "${2:name}",
        validate: new SimpleSchema({
          ${3:data}
          }).validator(),
        run(${4:argument}) {
          ${5}
        }
      });
    """,
  "Meteor Call":
    "prefix": "mcall"
    "body": """
      Meteor.call(${1:name}, ${2:args} (err, res) => {
        if(er) {
          ${3:err}
        } else {
          ${4:res}
        }
      });
    """,
  "Meteor Apply":
    "prefix": "mapp"
    "body": """
      Meteor.apply(${1:name}, ${2:args}, (err, res) => {
        if(err) {
          ${3:err}
        } else {
          ${4:res}
        }
      });
    """,

# JS TEMPLATE SNIPPETS
  "Template Helpers":
    "prefix": "mhel"
    "body": """
      Template.${1:name}.helpers({
        ${2:helper}(${3:args}) {
          ${4}
        },
      });
    """,
  "Template Events":
    "prefix": "mev"
    "body": """
      Template.${1:name}.events({
        "${2:event}"(event,instance) {
          ${3}
        },
      });
    """,
  "Template on Rendered":
    "prefix": "mren"
    "body": """
      Template.${1:name}.onRendered(function() {
        ${2}
      });
    """,
  "Template onCreated":
    "prefix": "mcre"
    "body": """
      Template.${1:name}.onCreated(function() {
        ${2}
      });
    """,
  "Template onDestroyed":
    "prefix": "mdes"
    "body": """
      Template.${1:name}.onDestroyed(function() {
        ${2}
      });
    """

# BLAZE SNIPPETS
".html":
  "Blaze Template":
    "prefix": "mtp"
    "body": """
      <template name="{1:name}">
        ${2}
      </template>
    """,
  "Blaze if":
    "prefix": "mif"
    "body": """
      {{#if ${1:statement}}}
        ${2}
      {{/if}}
    """,
  "Blaze if else":
    "prefix": "mife"
    "body": """
      {{#if ${1:statement}}}
        ${2}
      {{else}}
        ${3}
      {{/if}}
    """,
  "Blaze Each in":
    "prefix": "mei"
    "body": """
      {{#each ${1:value} in ${2:collection}}}
        ${3}
      {{/each}}
    """,
  "Blaze let":
    "prefix": "mlet"
    "body": """
      {{#let ${1:variable}=${2:helper}}}
        ${3}
      {{/let}}
    """
